"""
Django settings for maxpay project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
from prometheus_client import Counter, Histogram, CollectorRegistry

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Reading .env file


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise Exception("SECRET_KEY not found")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (
    True if os.getenv("ENV") == "staging" else False
)  # os.getenv("DEBUG", "False") == "True"

# ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost,*").split(",")
ALLOWED_HOSTS = [".max-payments.com", "127.0.0.1"]
CSRF_TRUSTED_ORIGINS = ['https://*.max-payments.com']
# APPEND_SLASH = False

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "drf_api_logger",
    "django_db_logger",
    "rest_framework",
    "common",
    "resources",
    "reconciliation",
    "payment_response",
    "transactions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware",
]

ROOT_URLCONF = "maxpay.urls"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"
        },
        "simple": {"format": "%(levelname)s %(asctime)s %(message)s"},
    },
    "handlers": {
        "db_log": {
            "level": "DEBUG",
            "class": "django_db_logger.db_log_handler.DatabaseLogHandler",
        },
    },
    "loggers": {
        "db": {"handlers": ["db_log"], "level": "DEBUG"},
        "django.request": {
            "handlers": ["db_log"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "maxpay.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DATABASE_ENGINE"),
        "NAME": os.getenv("DATABASE_NAME"),
        "USER": os.getenv("DATABASE_USER"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        "HOST": os.getenv("DATABASE_HOST"),
        "PORT": os.getenv("DATABASE_PORT"),
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.db"

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Mappings - storing transaction status with respective codes
MAPPINGS = {
    "Client Initiated": 0,
    "Pushed To Payment Gateway": 1,
    "Client Initiated - Gateway Error": 4,
    "success": 3,
    "failure": 2,
    "expired": 5
}

ENV = os.getenv("ENV")

# DRF_API_LOGGER_DATABASE = True

# Prometheus Metric Hooks
COUNTER_REGISTORY = CollectorRegistry()

INITIATE_TRANSACTION_COUNTER = Counter(
    name="Request_count_on_initiate_transaction_API",
    documentation="Frequency of requests on /api/transaction/",
)

TRANSACTION_DETAILS_COUNTER = Counter(
    name="Request_count_on_transaction_details_API",
    documentation="Frequency of requests on /api/transaction/details/",
)

PAYMENT_PAGE_COUNTER = Counter(
    name="Request_count_on_showing_payment_page_API",
    documentation="Frequency of requests on /api/pay/<str:referenceId>/",
)

COUNTER_REGISTORY.register(INITIATE_TRANSACTION_COUNTER)
COUNTER_REGISTORY.register(TRANSACTION_DETAILS_COUNTER)
COUNTER_REGISTORY.register(PAYMENT_PAGE_COUNTER)


API_EFFICIENCY_REGISTORY = CollectorRegistry()

INITITATE_TRANSACTION_RESPONSE_TIME = Histogram(
    name="Response_time_of_initiate_transaction_API",
    documentation="Efficiency of the /api/transaction/ (in seconds)",
)

TRANSACTION_DETAILS_RESPONSE_TIME = Histogram(
    name="Response_time_of_transaction_details_API",
    documentation="Efficiency of the /api/transaction/details/ (in seconds)",
)

PAYMENT_PAGE_RESPONSE_TIME = Histogram(
    name="Response_time_of_showing_payment_page_API",
    documentation="Efficiency of the /api/pay/<str:referenceId>/ (in seconds)",
)

DECENTRO_CALLBACK_RESPONSE_TIME = Histogram(
    name="Response_time_of_Decentro_callback_API",
    documentation="Efficiency of the /api/decentro/payment_response/ (in seconds)",
)

AIRPAY_CALLBACK_RESPONSE_TIME = Histogram(
    name="Response_time_of_AirPay_callback_API",
    documentation="Efficiency of the /api/airpay/payment_response/ (in seconds)",
)

ITZPAY_CALLBACK_RESPONSE_TIME = Histogram(
    name="Response_time_of_ItzPay_callback_API",
    documentation="Efficiency of the /api/itzpay/payment_response/ (in seconds)",
)

API_EFFICIENCY_REGISTORY.register(INITITATE_TRANSACTION_RESPONSE_TIME)
API_EFFICIENCY_REGISTORY.register(TRANSACTION_DETAILS_RESPONSE_TIME)
API_EFFICIENCY_REGISTORY.register(PAYMENT_PAGE_RESPONSE_TIME)
API_EFFICIENCY_REGISTORY.register(DECENTRO_CALLBACK_RESPONSE_TIME)
API_EFFICIENCY_REGISTORY.register(AIRPAY_CALLBACK_RESPONSE_TIME)
API_EFFICIENCY_REGISTORY.register(ITZPAY_CALLBACK_RESPONSE_TIME)


DB_EFFICIENCY_REGISTORY = CollectorRegistry()

TRANSACTION_CREATE_DB_RESPONSE_TIME = Histogram(
    name="Response_time_of_Creating_Transaction",
    documentation="Efficiency of Creating transaction in database (in seconds)",
)

RETRIEVE_TRANSACTION_DETAILS_DB_RESPONSE_TIME = Histogram(
    name="Response_time_of_transaction_details",
    documentation="Efficiency of retriving transaction details from database (in seconds)",
)

UPDATE_TRANSACTION_STATUS_DB_RESPONSE_TIME = Histogram(
    name="Response_time_of_Update_Transaction_status",
    documentation="Efficiency of Updating transaction status in database (in seconds)",
)

CHECK_TRANSACTION_EXISTS_DB_RESPONSE_TIME = Histogram(
    name="Response_time_of_Check_Transaction_exits",
    documentation="Efficiency of Checking transaction existance in database (in seconds)",
)

RETRIEVE_ACCOUNT_DB_RESPONSE_TIME = Histogram(
    name="Response_time_of_account_details",
    documentation="Efficiency of retriving account details from database (in seconds)",
)

PG_RESPONSE_CREATE_DB_RESPONSE_TIME = Histogram(
    name="Response_time_of_Creating_PG_Response",
    documentation="Efficiency of Creating PG Response in database (in seconds)",
)

RETRIEVE_PG_RESPONSE_DB_RESPONSE_TIME = Histogram(
    name="Response_time_of_retriving_PG_Response",
    documentation="Efficiency of Retriving PG Response from database (in seconds)",
)

RETRIEVE_REQUEST_DETAILS_DB_RESPONSE_TIME = Histogram(
    name="Response_time_of_retriving_Request_details",
    documentation="Efficiency of Retriving request details from database (in seconds)",
)

COMPLETE_TRANSACTION_DB_RESPONSE_TIME = Histogram(
    name="Response_time_of_completing_transaction",
    documentation="Efficiency of Completing transaction in database (in seconds)",
)

RETRIEVE_PG_DETAILS_DB_RESPONSE_TIME = Histogram(
    name="Response_time_of_retriving_PG_details",
    documentation="Efficiency of Retriving PG details from database (in seconds)",
)


DB_EFFICIENCY_REGISTORY.register(TRANSACTION_CREATE_DB_RESPONSE_TIME)
DB_EFFICIENCY_REGISTORY.register(RETRIEVE_TRANSACTION_DETAILS_DB_RESPONSE_TIME)
DB_EFFICIENCY_REGISTORY.register(UPDATE_TRANSACTION_STATUS_DB_RESPONSE_TIME)
DB_EFFICIENCY_REGISTORY.register(CHECK_TRANSACTION_EXISTS_DB_RESPONSE_TIME)
DB_EFFICIENCY_REGISTORY.register(RETRIEVE_ACCOUNT_DB_RESPONSE_TIME)
DB_EFFICIENCY_REGISTORY.register(PG_RESPONSE_CREATE_DB_RESPONSE_TIME)
DB_EFFICIENCY_REGISTORY.register(RETRIEVE_PG_RESPONSE_DB_RESPONSE_TIME)
DB_EFFICIENCY_REGISTORY.register(RETRIEVE_REQUEST_DETAILS_DB_RESPONSE_TIME)
DB_EFFICIENCY_REGISTORY.register(COMPLETE_TRANSACTION_DB_RESPONSE_TIME)
DB_EFFICIENCY_REGISTORY.register(RETRIEVE_PG_DETAILS_DB_RESPONSE_TIME)


SERVICE_EFFICIENCY_REGISTORY = CollectorRegistry()

CLIENT_AUTHENTICATOR_RESPONSE_TIME = Histogram(
    name="Response_time_of_client_authenticator",
    documentation="Efficiency of the Client Authenticator (in seconds)",
)

PG_AUTHENTICATOR_RESPONSE_TIME = Histogram(
    name="Response_time_of_pg_authenticator",
    documentation="Efficiency of the PG Authenticator (in seconds)",
)

UNIQUE_TRANSACTION_VERIFICATION_RESPONSE_TIME = Histogram(
    name="Response_time_of_unique_transaction_verification",
    documentation="Efficiency of the Unique Transaction Verification (in seconds)",
)

PAYLOAD_CREATOR_RESPONSE_TIME = Histogram(
    name="Response_time_of_payload_creator",
    documentation="Efficiency of the Payload Creator (in seconds)",
)

FINAL_REQUEST_CREATOR_RESPONSE_TIME = Histogram(
    name="Response_time_of_final_request_creator",
    documentation="Efficiency of the Final Request Creator (in seconds)",
)

SERVICE_EFFICIENCY_REGISTORY.register(CLIENT_AUTHENTICATOR_RESPONSE_TIME)
SERVICE_EFFICIENCY_REGISTORY.register(PG_AUTHENTICATOR_RESPONSE_TIME)
SERVICE_EFFICIENCY_REGISTORY.register(UNIQUE_TRANSACTION_VERIFICATION_RESPONSE_TIME)
SERVICE_EFFICIENCY_REGISTORY.register(PAYLOAD_CREATOR_RESPONSE_TIME)
SERVICE_EFFICIENCY_REGISTORY.register(FINAL_REQUEST_CREATOR_RESPONSE_TIME)


GATEWAY_EFFICIENCY_REGISTORY = CollectorRegistry()

PG_BALANCER_RESPONSE_TIME = Histogram(
    name="Response_time_of_pg_balancer",
    documentation="Efficiency of the PG Balancer (in seconds)",
)

INITITATE_TRANSACTION_DECENTRO_RESPONSE_TIME = Histogram(
    name="Response_time_of_initiate_transaction_decentro",
    documentation="Efficiency of the transaction initiation by decentro (in seconds)",
)

GENERATE_PAYMENT_LINK_DECENTRO_RESPONSE_TIME = Histogram(
    name="Response_time_of_generate_payment_link_decentro",
    documentation="Efficiency of the payment link generation by decentro (in seconds)",
)

INITITATE_TRANSACTION_AIRPAY_RESPONSE_TIME = Histogram(
    name="Response_time_of_initiate_transaction_airpay",
    documentation="Efficiency of the transaction initiation by airpay (in seconds)",
)

INITITATE_TRANSACTION_ITZPAY_RESPONSE_TIME = Histogram(
    name="Response_time_of_initiate_transaction_itzpay",
    documentation="Efficiency of the transaction initiation by itzpay (in seconds)",
)

GATEWAY_EFFICIENCY_REGISTORY.register(PG_BALANCER_RESPONSE_TIME)
GATEWAY_EFFICIENCY_REGISTORY.register(INITITATE_TRANSACTION_DECENTRO_RESPONSE_TIME)
GATEWAY_EFFICIENCY_REGISTORY.register(GENERATE_PAYMENT_LINK_DECENTRO_RESPONSE_TIME)
GATEWAY_EFFICIENCY_REGISTORY.register(INITITATE_TRANSACTION_AIRPAY_RESPONSE_TIME)
GATEWAY_EFFICIENCY_REGISTORY.register(INITITATE_TRANSACTION_ITZPAY_RESPONSE_TIME)
