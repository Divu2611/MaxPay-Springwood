# Importing Python Libraries
import os
import time
from dotenv import load_dotenv
from django.conf import settings

# Importing Project Files
from .decentroPaymentGateway import Decentro

load_dotenv()

# Reading environment credentials
CLIENT_ID = os.getenv("DECENTRO_CLIENT_ID")
CLIENT_SECRET = os.getenv("DECENTRO_CLIENT_SECRET")
MODULE_SECRET = os.getenv("DECENTRO_PAYMENTS_MODULE_SECRET")
PROVIDER_SECRET = os.getenv("DECENTRO_YBL_PROVIDER_SECRET")
MVA_ESCROW = os.getenv("DECENTRO_MVA_ESCROW")

decentro = Decentro(
    id=CLIENT_ID,
    clientSecret=CLIENT_SECRET,
    moduleSecret=MODULE_SECRET,
    providerSecret=PROVIDER_SECRET,
    payeeAccount=MVA_ESCROW,
    env="prod",
)

"""
initiateTransactionDecentro - initiates the transaction via Decentro.

Parameters of the function:
* data (type dictionary) - holds all the data posted by client, required for transaction to initiate
transactionDetails (required by Decentro) is then generated.

Return values of the function:
* finalResult (type dictionary) - response generated by Decentro (can be either success/failure depending on the payload generated)
"""


def initiateTransactionDecentro(data):
    startTime = time.time()

    transactionDetails = {
        "referenceId": data["referenceId"],
        "upiId": data["upiId"],
        "amount": data["amount"],
        "purposeMessage": "Payment for {}".format(data["productInformation"]),
        "name": "{} {}".format(data["firstName"], data["lastName"]),
    }

    # initiating the transaction.
    finalResult = decentro.initiatePaymentAPI(params=transactionDetails)

    endTime = time.time() - startTime
    # Analyzing the efficiency of the decentro
    decentroEfficiency = settings.INITITATE_TRANSACTION_DECENTRO_RESPONSE_TIME
    decentroEfficiency.observe(endTime)

    return finalResult


"""
generatePaymentLinkDecentro - initiates the transaction via Decentro (by generating a intent flow link).

Parameters of the function:
* data (type dictionary) - holds all the data posted by client, required for transaction to initiate
transactionDetails (required by Decentro) is then generated.

Return values of the function:
* finalResult (type dictionary) - response generated by decentro (can be either success/failure depending on the payload generated)
"""


def generatePaymentLinkDecentro(data):
    startTime = time.time()

    transactionDetails = {
        "referenceId": data["referenceId"],
        "amount": data["amount"],
        "purposeMessage": "Payment for {}".format(data["productInformation"]),
        "name": "{} {}".format(data["firstName"], data["lastName"]),
    }

    # initiating the request to create the link.
    finalResult = decentro.generatePaymentLink(params=transactionDetails)

    endTime = time.time() - startTime
    # Analyzing the efficiency of the decentro
    decentroEfficiency = settings.GENERATE_PAYMENT_LINK_DECENTRO_RESPONSE_TIME
    decentroEfficiency.observe(endTime)

    return finalResult
