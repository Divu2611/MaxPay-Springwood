# Import Python Libraries
import os
import time
from dotenv import load_dotenv
from django.conf import settings

# Importing Project Files
from .itzpayPaymentGateway import ItzPay

load_dotenv()

# Reading environment credentials
CLIENT_ID = os.getenv("ITZPAY_CLIENT_ID")
CLIENT_SECRET = os.getenv("ITZPAY_CLIENT_SECRET")
SECRET_KEY = os.getenv("ITZPAY_SECRET_KEY")
env = "test" if os.getenv("ENV") == "staging" else "prod"

itzPay = ItzPay(id=CLIENT_ID, secret=CLIENT_SECRET, key=SECRET_KEY, env=env)

"""
initiateTransactionItzPay - initiates the transaction via ItzPay.

Parameters of the function:
* data (type dictionary) - holds all the data posted by client, required for transaction to initiate.
transactionDetails (required by ItzPay) is then generated.

Return values of the function:
* finalResult (type dictionary) - response generated by ItzPay (can be either success/failure depending on the payload generated).
"""


def initiateTransactionItzPay(data):
    startTime = time.time()

    transactionDetails = {
        "referenceId": data["referenceId"],
        "paymentMode": data["paymentMode"],
        "productInformation": data["productInformation"],
        "amount": data["amount"],
        "phoneNumber": data["phoneNumber"],
        "emailId": data["emailId"],
        "cnic": data["cnic"],
    }

    # initiating the transaction.
    finalResult = itzPay.initiatePaymentAPI(params=transactionDetails)

    endTime = time.time() - startTime
    # Analyzing the efficiency of the itzpay
    itzpayEfficiency = settings.INITITATE_TRANSACTION_ITZPAY_RESPONSE_TIME
    itzpayEfficiency.observe(endTime)

    return finalResult
